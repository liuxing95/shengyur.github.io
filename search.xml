<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>React小书全记录-第一阶段</title>
      <link href="/2018/05/21/React%E5%B0%8F%E4%B9%A6%E5%85%A8%E8%AE%B0%E5%BD%95(-)/"/>
      <url>/2018/05/21/React%E5%B0%8F%E4%B9%A6%E5%85%A8%E8%AE%B0%E5%BD%95(-)/</url>
      <content type="html"><![CDATA[<h3 id="React基本环境安装"><a href="#React基本环境安装" class="headerlink" title="React基本环境安装"></a>React基本环境安装</h3><p><img src="https://huzidaha.github.io/static/assets/img/posts/44B5EC06-EAEB-4BA2-B3DC-325703E4BA45.png" alt=""><br>使用 React.js 不管在开发阶段生产阶段都需要一堆工具和库辅助，编译阶段你需要借助 Babel；需要 Redux 等第三方的 <strong>状态管理工具</strong> 来组织代码；如果你要写 <strong>单页面应用</strong> 那么你需要 React-router。这就是所谓的“React.js全家桶”。</p><p>安装好nodejs包括npm之后,只需要按照<a href="https://github.com/facebook/create-react-app" target="_blank" rel="noopener">官网</a>的指引安装 create-react-app 即可<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g <span class="keyword">create</span>-react-app</span><br></pre></td></tr></table></figure></p><p>这条命令会往我们的机器上安装一条叫 create-react-app 的命令，安装好以后就可以直接使用它来构建一个 react 的前端工程：<br><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">create-react-app</span> <span class="string">hello-react</span></span><br></pre></td></tr></table></figure></p><p>这条命令会帮我们构建一个叫 hello-react 的工程，并且会自动地帮助我们安装所需要的依赖，现在只需要安静地等待它安装完。<br>安装完成之后,我们就可以启动工程了<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hello-react</span><br><span class="line">npm <span class="built_in">start</span></span><br></pre></td></tr></table></figure></p><p>终端提示成功之后，会自动打开浏览器，就可以看到react的工程顺利运行的结果，修改之后可以自动刷新。</p><h3 id="使用JSX描述UI信息"><a href="#使用JSX描述UI信息" class="headerlink" title="使用JSX描述UI信息"></a>使用JSX描述UI信息</h3><p>React.createElement 会构建一个 JavaScript 对象来描述你 HTML 结构的信息，包括标签名、属性、还有子元素等。这样的代码就是合法的 JavaScript 代码了。所以 <strong>使用 React 和 JSX 的时候一定要经过编译的过程</strong>。<br><strong>所谓的 JSX 其实就是 JavaScript 对象</strong>。每当在 JavaScript 代码中看到这种 JSX 结构的时候，脑子里面就可以自动做转化，这样对你理解 React.js 的组件写法很有好处。<br>有了这个表示 HTML 结构和信息的对象以后，就可以拿去构造真正的 DOM 元素，然后把这个 DOM 元素塞到页面上。这也是我们最后一段代码中 ReactDOM.render 所干的事情：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Header /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>ReactDOM.render 功能就是 <strong>把组件渲染并且构造 DOM 树，然后插入到页面上某个特定的元素上</strong>（在这里是 id 为 root 的 div 元素）。<br>那么从 JSX 到页面到底经过了什么样的过程?<br><img src="https://huzidaha.github.io/static/assets/img/posts/44B5EC06-EAEB-4BA2-B3DC-325703E4BA45.png" alt=""></p><p>那么，为什么不直接从 JSX 直接渲染构造 DOM 结构，而是要经过中间这么一层呢？</p><ol><li>当我们拿到一个表示 UI 的结构和信息的对象以后，不一定会把元素渲染到浏览器的普通页面上，我们有可能把这个结构渲染到 canvas 上，或者是手机 App 上。所以这也是为什么会要把 react-dom 单独抽离出来的原因，可以想象有一个叫 react-canvas 可以帮我们把 UI 渲染到 canvas 上，或者是有一个叫 react-app 可以帮我们把它转换成原生的 App（实际上这玩意叫 ReactNative）</li><li>有了这样一个对象。当数据变化，需要更新组件的时候，就可以用比较快的算法操作这个 JavaScript 对象，而不用直接操作页面上的 DOM，这样可以尽量少的减少浏览器重排，极大地优化性能。</li></ol><p>总结：</p><ol><li>JSX 是 JavaScript 语言的一种语法扩展，长得像 HTML，但并不是 HTML。</li><li>React.js 可以用 JSX 来描述你的组件长什么样的。</li><li>JSX 在编译的时候会变成相应的 JavaScript 对象描述。</li><li>react-dom 负责把这个用来描述 UI 信息的 JavaScript 对象变成 DOM 元素，并且渲染到页面上。</li></ol>]]></content>
      
      <categories>
          
          <category> 库/框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nodejs之npm&amp;package.json学习</title>
      <link href="/2018/05/18/Nodejs%E4%B9%8Bnpm&amp;package.json%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/05/18/Nodejs%E4%B9%8Bnpm&amp;package.json%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>作为前端，因为经常用到gulp，webpack等工具，所以我们最常见到的是npm和package.json，所以先总结一下它们俩的常用命令。</p><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">init</span> <span class="comment">//会询问package.json的各种信息，从而确认</span></span><br><span class="line"></span><br><span class="line">npm <span class="keyword">init</span> --y <span class="comment">//全部使用默认值,快速生成package.json</span></span><br></pre></td></tr></table></figure><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> &lt;<span class="keyword">package</span> <span class="keyword">name</span>&gt; &lt;<span class="keyword">package</span> <span class="keyword">name</span>&gt; ...</span><br><span class="line"></span><br><span class="line">npm <span class="keyword">install</span> &lt;<span class="keyword">package</span> <span class="keyword">name</span>&gt; -g</span><br><span class="line"></span><br><span class="line">npm <span class="keyword">install</span> &lt;<span class="keyword">package</span> <span class="keyword">name</span>&gt; <span class="comment">--save</span></span><br><span class="line"></span><br><span class="line">npm <span class="keyword">install</span> &lt;<span class="keyword">package</span> <span class="keyword">name</span>&gt; <span class="comment">--save-dev</span></span><br><span class="line"></span><br><span class="line">npm <span class="keyword">install</span> &lt;pacakage <span class="keyword">name</span>&gt;  <span class="comment">--O //--save-optional  -B: --save-bundle  -E: --save-exact</span></span><br></pre></td></tr></table></figure><p>npm install <package name=""> -g :全局安装，需要注意的是全局模式并不是将一个模块安装包安装为一个全局包的意思，它并不意味着可以从任何地方通过require()来引用，-g的含义是将一个包安装为全局可用的可执行命令,例如gulp，webpack等。</package></p><p>–save与–save-dev的区别 :<br>–save:是生产环境中项目运行需要的依赖,比如代码所依赖的库或框架(Jquery,React等)，安装后被记录在package.json中的dependencies关键字下；<br>–save-dev:开发时候需要的依赖，安装后被记录在devDependencies关键字下。如一些开发时候需要用的gulp，webpack工具。</p><p>同样–O/B/E分别会被记录到对应的关键字下。</p><h3 id="更新依赖包"><a href="#更新依赖包" class="headerlink" title="更新依赖包"></a>更新依赖包</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> update</span><br><span class="line"></span><br><span class="line"><span class="built_in">npm</span> update  -g</span><br><span class="line"></span><br><span class="line"><span class="built_in">npm</span> outdated</span><br><span class="line"></span><br><span class="line"><span class="built_in">npm</span> outdated -g</span><br></pre></td></tr></table></figure><p>在项目目录下运行npm update可以升级项目中所用依赖到最新版本，而npm update -g则可以升级全局安装的依赖包到最新版。</p><p>npm outdated用于检查模块是否过时并列出。</p><h3 id="卸载依赖"><a href="#卸载依赖" class="headerlink" title="卸载依赖"></a>卸载依赖</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">uninstall</span> &lt;<span class="keyword">package</span> <span class="keyword">name</span>&gt; &lt;<span class="keyword">package</span> <span class="keyword">name</span>&gt; ...</span><br><span class="line"></span><br><span class="line">npm <span class="keyword">uninstall</span> &lt;<span class="keyword">package</span> <span class="keyword">name</span>&gt; -g</span><br><span class="line"></span><br><span class="line">npm <span class="keyword">uninstall</span> &lt;<span class="keyword">package</span> <span class="keyword">name</span>&gt; <span class="comment">--save</span></span><br><span class="line"></span><br><span class="line">npm <span class="keyword">uninstall</span> &lt;<span class="keyword">package</span> <span class="keyword">name</span>&gt; <span class="comment">--save-dev</span></span><br></pre></td></tr></table></figure><p>使用npm uninstall可以卸载依赖，但是卸载后，在package.json中的纪录并不会被删除，要想在卸载依赖的同时删除在package.json中的纪录，需要在卸载的时候使用安装时的所有的选项，例如，如果安装时候使用了npm install <package name=""> –save则卸载的时候，同样使用npm uninstall <pacakage name=""> –save，而如果使用了–save-dev，卸载时候也需要加相同的选项。</pacakage></package></p><h3 id="使用自定义npm命令"><a href="#使用自定义npm命令" class="headerlink" title="使用自定义npm命令"></a>使用自定义npm命令</h3><p>在package.json中，有一个scripts关键字，只需要在该关键字内写入自定义命令以及对应执行的实际命令即可。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>:&#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"nonde ./test.js"</span>,</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"gulp --gulpfile gulpfile-dev.js"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"gulp --gulpfile gulpfile-build.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的配置中，只要我们在终端运行npm dev就是运行了gulp –gulpfile gulpfile-dev.js，这样就省去了我们在终端输入很长的一段命令，非常方便。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>npm view <pacakage name="">可以查看包的package.json文件，如果只是看包的某个特性，在后面加上相应的key即可，例如npm v zepto version就是查看当前安装的zepto的版本，v是view的简写。</pacakage></p><p>npm ls可以分析出当前当前项目下能够通过模块路径找到的所有包，并生成依赖树。</p><p>npm doc <package name="">可以打开该依赖包的官网，其实就是打开了package.json中的homepage。</package></p><h2 id="package-json文件"><a href="#package-json文件" class="headerlink" title="package.json文件"></a>package.json文件</h2><p>在运行npm init后会生成package.json文件，该文件用于记录项目中所用到的依赖以及项目的配置信息（比如名称、版本、许可证等）。npm install命令根据这个配置文件自动下载项目运行和开发所需要的依赖。<br>一个比较完整的package.json文件如下：<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"project"</span>, //包名</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"1.0.0"</span>, //版本号</span><br><span class="line">    <span class="string">"author"</span>: <span class="string">"张三"</span>, //包的作者的名字</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"第一个node.js程序"</span>,//包的描述</span><br><span class="line">    <span class="string">"keywords"</span>:[<span class="string">"node.js"</span>,<span class="string">"javascript"</span>], //关键字</span><br><span class="line">    <span class="string">"repository"</span>: &#123; //包代码存放的地方，可以是git或者svn</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"https://path/to/url"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"license"</span>:<span class="string">"MIT"</span>,//开源许可证</span><br><span class="line">    <span class="string">"engines"</span>: &#123;<span class="string">"node"</span>: <span class="string">"0.10.x"</span>&#125;,</span><br><span class="line">    <span class="string">"bugs"</span>:&#123;<span class="string">"url"</span>:<span class="string">"http://path/to/bug"</span>,<span class="string">"email"</span>:<span class="string">"bug@example.com"</span>&#125;,</span><br><span class="line">    <span class="string">"contributors"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"李四"</span>,<span class="string">"email"</span>:<span class="string">"lisi@example.com"</span>&#125;],</span><br><span class="line">    <span class="string">"scripts"</span>: &#123;</span><br><span class="line">        <span class="string">"start"</span>: <span class="string">"node index.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">        <span class="string">"express"</span>: <span class="string">"latest"</span>,</span><br><span class="line">        <span class="string">"mongoose"</span>: <span class="string">"~3.8.3"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">        <span class="string">"grunt"</span>: <span class="string">"~0.4.1"</span>,</span><br><span class="line">        <span class="string">"grunt-contrib-concat"</span>: <span class="string">"~0.3.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>小标签1：如何为代码选择开源许可证，这是一个问题。<br>世界上的开源许可证，大概有上百种。很少有人搞得清楚它们的区别。即使在最流行的六种—-GPL、BSD、MIT、Mozilla、Apache和LGPL—-之中做选择，也很复杂。乌克兰程序员Paul Bagwell，画了一张分析图，说明应该怎么选择。只用两分钟，你就能搞清楚这六种许可证之间的最大区别。下面是阮一峰老师制作的中文版，请点击看大图。<br><img src="https://raw.githubusercontent.com/shengyur/shengyur.github.io/master/img/license.png" alt=""></li><li><p>engines</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可选字段。既可以指定node版本:</span><br><span class="line"> &#123; <span class="string">"engines"</span> : &#123;<span class="string">"node"</span> : <span class="string">"&gt;=0.10.3 &lt;0.12"</span> &#125; &#125;</span><br><span class="line">也可以指定npm版本：</span><br><span class="line"> &#123; <span class="string">"engines"</span> : &#123;<span class="string">"npm"</span> : <span class="string">"~1.0.20"</span> &#125; &#125;</span><br></pre></td></tr></table></figure></li><li><p>scripts：脚本说明对象。它主要被包管理器用来安装、编译、测试和卸载包.<br>示例如下:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"scripts"</span>:&#123;</span><br><span class="line"></span><br><span class="line">    “<span class="keyword">install</span>”:<span class="string">"install.js"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"test"</span>:<span class="string">"test.js"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>main：模块引入方法require()在引入包时，会优先检查这个字段，并将其作为包中其余模块的入口，如果该字段不存在，则node会检查目录下的index.js，index.node，index.json作为默认入口。</p></li></ol><p>原文：<br><a href="https://segmentfault.com/a/1190000007624021" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007624021</a><br><a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html</a></p>]]></content>
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端自动化测试探索</title>
      <link href="/2018/05/17/JavaScript-test-framework/"/>
      <url>/2018/05/17/JavaScript-test-framework/</url>
      <content type="html"><![CDATA[<h3 id="常用的前端测试工具一览"><a href="#常用的前端测试工具一览" class="headerlink" title="常用的前端测试工具一览"></a>常用的前端测试工具一览</h3><p>前端测试工具也和前端的框架一样纷繁复杂，其中常见的测试工具，大致可分为 <strong>测试框架</strong>、<strong>断言库</strong>、<strong>测试覆盖率工具</strong> 等几类。在正式开始本文之前，我们先来大致了解下它们：</p><h3 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h3><p>测试框架的作用是提供一些方便的语法来描述测试用例，以及对用例进行分组。<br>测试一般分两种：BDD和TDD<br><a id="more"></a></p><ol><li>先介绍Test-Driven Development(TDD)即测试驱动开发，TDD的原理是在开发功能代码之前，先编写单元测试用例代码，测试代码确定需要编写什么产品代码。国外使用这种开发模式较多，github上大型的开源项目，如果没跑过测试用例，大概是没人敢在生产环境中使用的。<br>测试驱动对开发过程的要求：</li></ol><ul><li>单元尽量解耦，否则单元不可测</li><li>开发前，先设计接口，再实现细节</li><li>便于回归和内部代码重构 (把所有单元测试，集成测试等都做好之后，实现重构就更加从容，可以一块一块进行)</li></ul><ol start="2"><li>BDD指的是Behavior Drive Development，也就是行为驱动开发。传统的开发模式中，客户很难从技术层面理解问题，开发人员很难从业务需求考虑问题，BDD描述的行为就像一个个的故事(Story)，系统业务专家、开发者、测试人员一起合作，分析需求，然后将这些需求写成一个个的故事(应用场景)。开发者负责填充这些故事的内容，测试者负责检验这些故事的结果。通常，通过设定各种业务场景中该展示的状态、适用的事件，以及场景的执行结果，基本就完成了一个完整测试的定义。</li></ol><p>常见的测试框架有 <a href="https://jasmine.github.io/" target="_blank" rel="noopener">Jasmine</a>, <a href="https://mochajs.org/" target="_blank" rel="noopener">Mocha</a>,以及本文要介绍的 <a href="https://facebook.github.io/jest/zh-Hans/" target="_blank" rel="noopener">Jest</a> 。</p><h3 id="断言库"><a href="#断言库" class="headerlink" title="断言库"></a>断言库</h3><p>断言库主要提供语义化方法，用于对参与测试的值做各种各样的判断。这些语义化方法会返回测试的结果，要么成功、要么失败。常见的断言库有 <a href="https://shouldjs.github.io/" target="_blank" rel="noopener">Should.js</a>, <a href="http://www.chaijs.com/" target="_blank" rel="noopener">Chai.js</a> 等。</p><h3 id="测试覆盖率工具"><a href="#测试覆盖率工具" class="headerlink" title="测试覆盖率工具"></a>测试覆盖率工具</h3><p>用于统计测试用例对代码的测试情况，生成相应的报表，比如 <a href="https://github.com/gotwarlost/istanbul" target="_blank" rel="noopener">istanbul</a>。</p><h2 id="Jest"><a href="#Jest" class="headerlink" title="Jest"></a>Jest</h2><h3 id="为什么选择Jest"><a href="#为什么选择Jest" class="headerlink" title="为什么选择Jest"></a>为什么选择Jest</h3><p>Jest 是 Facebook 出品的一个测试框架，相对其他测试框架，其一大特点就是就是内置了常用的测试工具，比如自带断言、测试覆盖率工具，实现了开箱即用。</p><p>而作为一个面向前端的测试框架， Jest 可以利用其特有的<a href="https://facebook.github.io/jest/docs/zh-Hans/snapshot-testing.html#content" target="_blank" rel="noopener">快照测试</a>功能，通过比对 UI 代码生成的快照文件，实现对 React 等常见框架的自动测试。</p><p>此外， Jest 的测试用例是并行执行的，而且只执行发生改变的文件所对应的测试，提升了测试速度。目前在 Github 上其 star 数已经破万；而除了 Facebook 外，业内其他公司也开始从其它测试框架转向 Jest ，相信未来 Jest 的发展趋势仍会比较迅猛。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Jest 可以通过 npm 或 yarn 进行安装。以 npm 为例，既可用npm install -g jest进行全局安装；也可以只局部安装、并在 package.json 中指定 test 脚本：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"jest"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Jest 的测试脚本名形如<em>.test.js，不论 Jest 是全局运行还是通过npm test运行，它都会执行当前目录下所有的</em>.test.js 或.spec.js 文件、完成测试。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="用例的表示"><a href="#用例的表示" class="headerlink" title="用例的表示"></a>用例的表示</h4><p>表示测试用例是一个测试框架提供的最基本的 API ， Jest 内部使用了 Jasmine 2 来进行测试，故其用例语法与 Jasmine 相同。test()函数来描述一个测试用例，举个简单的例子：<br>sum.js<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span></span> <span class="built_in">sum</span>(a, b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">module</span>.exports = <span class="built_in">sum</span>;</span><br></pre></td></tr></table></figure></p><p>sum.test.js<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const sum = require('./sum')<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">test('adds <span class="number">1</span> + <span class="number">2</span> to equal <span class="number">3</span>', () =&gt; &#123;</span><br><span class="line">  //expect(<span class="name">sum</span>(<span class="number">1</span>, <span class="number">2</span>)).toBe(<span class="number">3</span>)<span class="comment">;//成功</span></span><br><span class="line">  expect(<span class="name">sum</span>(<span class="number">1</span>, <span class="number">2</span>)).toBe(<span class="number">5</span>)<span class="comment">;//失败  </span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>其中toBe(‘Hello world’)便是一句断言（ Jest 管它叫 “matcher” ，想了解更多 matcher 请参考文档<a href="https://facebook.github.io/jest/docs/zh-Hans/using-matchers.html#content）。" target="_blank" rel="noopener">https://facebook.github.io/jest/docs/zh-Hans/using-matchers.html#content）。</a><br>写完了用例，运行在项目目录下执行npm test，即可看到测试结果：<br><img src="https://raw.githubusercontent.com/shengyur/shengyur.github.io/master/img/1%2B2.jpg" alt=""><br>修改测试用例为expect(sum(1, 2)).toBe(3)，执行npm test,可看到测试通过：<br><img src="https://raw.githubusercontent.com/shengyur/shengyur.github.io/master/img/1_2.jpg" alt=""></p><h4 id="用例的预处理或后处理："><a href="#用例的预处理或后处理：" class="headerlink" title="用例的预处理或后处理："></a>用例的预处理或后处理：</h4><p>有时我们想在测试开始之前进行下环境的检查、或者在测试结束之后作一些清理操作，这就需要对用例进行预处理或后处理。</p><ul><li>对测试文件中所有的用例进行统一的预处理，可以使用 beforeAll() 函数；</li><li>如果想在每个用例开始前进行都预处理，则可使用 beforeEach() 函数；</li><li>后处理，可以使用对应的 afterAll() 和 afterEach() 函数。</li><li>如果只是想对某几个用例进行同样的预处理或后处理，可以将先将这几个用例归为一组。使用 describe() 函数即可表示一组用例，再将上面提到的四个处理函数置于 describe() 的处理回调内，就实现了对一组用例的预处理或后处理：</li></ul><p>checkAll.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> o=&#123;</span><br><span class="line">    foo:<span class="literal">true</span>,</span><br><span class="line">    bar:<span class="literal">false</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports=obj();</span><br></pre></td></tr></table></figure></p><p>checkAll.test.js<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var testObject = <span class="built_in">require</span>(<span class="string">'./checkAll'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">describe(<span class="string">'test testObject'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    beforeAll(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="regexp">//</span> 预处理操作</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    test(<span class="string">'is foo'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">       expect(testObject.foo).toBeTruthy();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    test(<span class="string">'is not bar'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        expect(testObject.bar).toBeFalsy();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    afterAll(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="regexp">//</span> 后处理操作</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>执行npm test<br><img src="https://raw.githubusercontent.com/shengyur/shengyur.github.io/master/img/describe.jpg" alt=""></p><p>###</p><h2 id="Mocha"><a href="#Mocha" class="headerlink" title="Mocha"></a>Mocha</h2><p>Mocha允许你使用任意你喜欢的断言库，在上面的例子中，我们使用了Node.js内置的assert模块作为断言</p><p>原文：</p><ul><li><a href="https://segmentfault.com/a/1190000004558796" target="_blank" rel="noopener">https://segmentfault.com/a/1190000004558796</a></li><li><a href="https://zhuanlan.zhihu.com/p/28162082" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/28162082</a></li></ul>]]></content>
      
      <categories>
          
          <category> 前端自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jest </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>flex布局从懵逼到运用</title>
      <link href="/2018/05/06/flex%E5%B8%83%E5%B1%80%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E8%BF%90%E7%94%A8/"/>
      <url>/2018/05/06/flex%E5%B8%83%E5%B1%80%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E8%BF%90%E7%94%A8/</url>
      <content type="html"><![CDATA[<figure><br><img src="https://raw.githubusercontent.com/shengyur/shengyur.github.io/master/img/flex.png"><br></figure><p>本文包括了Flex布局的语法介绍，以及几种运用Flex布局实现的实例，涵盖了常见的使用场景。</p><h3 id="一、Flex-布局是什么？"><a href="#一、Flex-布局是什么？" class="headerlink" title="一、Flex 布局是什么？"></a>一、Flex 布局是什么？</h3><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>任何一个容器都可以指定为 Flex 布局。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>行内元素也可以使用 Flex 布局。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Webkit 内核的浏览器，必须加上-webkit前缀。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：<strong>设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效</strong>。</p><h3 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h3><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。<br><img src="https://raw.githubusercontent.com/shengyur/shengyur.github.io/master/img/flex.png"><br>容器默认存在两根轴，水平的叫做 <strong>主轴</strong>(main axis),垂直的叫做 <strong>交叉轴</strong>(cross axis)。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p><h3 id="三、容器的属性"><a href="#三、容器的属性" class="headerlink" title="三、容器的属性"></a>三、容器的属性</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"container"</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"item"</span>&gt;<span class="number">1</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"item"</span>&gt;<span class="number">2</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"item"</span>&gt;<span class="number">3</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>以下6个属性设置在容器上<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-direction</span></span><br><span class="line"><span class="attribute">flex-wrap</span></span><br><span class="line"><span class="attribute">flex-flow</span></span><br><span class="line"><span class="attribute">justify-content</span></span><br><span class="line"><span class="attribute">align-items</span></span><br><span class="line"><span class="attribute">align-content</span></span><br></pre></td></tr></table></figure></p><h4 id="1-flex-direction属性决定主轴的方向（即项目的排列方向），有4个属性值"><a href="#1-flex-direction属性决定主轴的方向（即项目的排列方向），有4个属性值" class="headerlink" title="1. flex-direction属性决定主轴的方向（即项目的排列方向），有4个属性值"></a>1. flex-direction属性决定主轴的方向（即项目的排列方向），有4个属性值</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>row(默认值)：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul><h4 id="2-flex-wrap属性，默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。可能取3个值"><a href="#2-flex-wrap属性，默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。可能取3个值" class="headerlink" title="2. flex-wrap属性，默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。可能取3个值"></a>2. flex-wrap属性，默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。可能取3个值</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>nowrap（默认）：不换行。</li><li>wrap：换行，第一行在上方。</li><li>wrap-reverse：换行，第一行在下方。</li></ul><h4 id="3-flex-flow属性，是flex-direction属性和flex-wrap属性的简写形式，默认值为row-nowrap"><a href="#3-flex-flow属性，是flex-direction属性和flex-wrap属性的简写形式，默认值为row-nowrap" class="headerlink" title="3. flex-flow属性，是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap"></a>3. flex-flow属性，是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-justify-content属性，定义了项目在-主轴-上的对齐方式"><a href="#4-justify-content属性，定义了项目在-主轴-上的对齐方式" class="headerlink" title="4.justify-content属性，定义了项目在 主轴 上的对齐方式"></a>4.justify-content属性，定义了项目在 <strong>主轴</strong> 上的对齐方式</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">  justify-content: flex-start | flex-<span class="keyword">end</span> | center | <span class="literal">space</span>-<span class="keyword">between</span> | <span class="literal">space</span>-<span class="keyword">around</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</li></ul><h4 id="5-align-items属性-定义项目在-交叉轴-上如何对齐"><a href="#5-align-items属性-定义项目在-交叉轴-上如何对齐" class="headerlink" title="5.align-items属性,定义项目在 交叉轴 上如何对齐"></a>5.align-items属性,定义项目在 <strong>交叉轴</strong> 上如何对齐</h4><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">  align-items: flex-start | <span class="type">flex</span>-<span class="keyword">end</span> | <span class="type">center</span> | <span class="type">baseline</span> | <span class="type">stretch</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p><ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><h4 id="6-align-content属性-定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。"><a href="#6-align-content属性-定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。" class="headerlink" title="6.align-content属性,定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。"></a>6.align-content属性,定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</h4><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  align-content: flex-start | <span class="type">flex</span>-<span class="keyword">end</span> | <span class="type">center</span> | <span class="type">space</span>-between | <span class="type">space</span>-around | <span class="type">stretch</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul><h3 id="四、项目的属性"><a href="#四、项目的属性" class="headerlink" title="四、项目的属性"></a>四、项目的属性</h3><p>以下6个属性设置在项目上。</p><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self</li></ul><h4 id="1-order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。"><a href="#1-order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。" class="headerlink" title="1.order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。"></a>1.order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-flex-grow属性-定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。"><a href="#2-flex-grow属性-定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。" class="headerlink" title="2.flex-grow属性,定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。"></a>2.flex-grow属性,定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><h4 id="3-flex-shrink属性-定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。"><a href="#3-flex-shrink属性-定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。" class="headerlink" title="3.flex-shrink属性,定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。"></a>3.flex-shrink属性,定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p><h4 id="4-flex-basis属性-定义了在分配多余空间之前，项目占据的主轴空间（main-size）"><a href="#4-flex-basis属性-定义了在分配多余空间之前，项目占据的主轴空间（main-size）" class="headerlink" title="4.flex-basis属性,定义了在分配多余空间之前，项目占据的主轴空间（main size）"></a>4.flex-basis属性,定义了在分配多余空间之前，项目占据的主轴空间（main size）</h4><p>浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p><h4 id="5-flex属性是flex-grow-flex-shrink-和-flex-basis的简写，默认值为0-1-auto。后两个属性可选。"><a href="#5-flex属性是flex-grow-flex-shrink-和-flex-basis的简写，默认值为0-1-auto。后两个属性可选。" class="headerlink" title="5.flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。"></a>5.flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">'flex-grow'</span>&gt; &lt;<span class="string">'flex-shrink'</span>&gt; &lt;<span class="string">'flex-basis'</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。<br>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><h4 id="6-align-self属性-属性允许单个项目有与其他项目不一样的对齐方式"><a href="#6-align-self属性-属性允许单个项目有与其他项目不一样的对齐方式" class="headerlink" title="6.align-self属性,属性允许单个项目有与其他项目不一样的对齐方式."></a>6.align-self属性,属性允许单个项目有与其他项目不一样的对齐方式.</h4><p>可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  align-self: <span class="built_in">auto</span> | <span class="type">flex</span>-start | <span class="type">flex</span>-<span class="keyword">end</span> | <span class="type">center</span> | <span class="type">baseline</span> | <span class="type">stretch</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p><p>flex布局练习代码：<br><img src="https://raw.githubusercontent.com/shengyur/shengyur.github.io/master/img/flexDemo.jpg" alt=""><br>HTML:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"item"</span>&gt;<span class="number">1</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"item"</span>&gt;<span class="number">2</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"item"</span>&gt;<span class="number">3</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"item"</span>&gt;<span class="number">4</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"item"</span>&gt;<span class="number">5</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"item"</span>&gt;<span class="number">6</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"item"</span>&gt;<span class="number">7</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"item"</span>&gt;<span class="number">8</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"item"</span>&gt;<span class="number">9</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"item"</span>&gt;<span class="number">10</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"item"</span>&gt;<span class="number">11</span>&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="comment">/* height: 400px; */</span></span><br><span class="line">    <span class="attribute">background-color</span>: blanchedalmond;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-flow</span>: row wrap;</span><br><span class="line">    <span class="comment">/* 默认 */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">    <span class="attribute">align-content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 0, 255, 0.315)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-of-type(1)</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">7</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-of-type(2)</span> &#123;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*flex-shrink为0时，即使空间不够，也不缩小*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-of-type(3)</span> &#123;</span><br><span class="line">    <span class="comment">/* order: 1; */</span></span><br><span class="line">    <span class="attribute">flex-basis</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-of-type(4)</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-of-type(5)</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="五、flex运用实例"><a href="#五、flex运用实例" class="headerlink" title="五、flex运用实例"></a>五、flex运用实例</h3><ol><li>如何使用flex布局绘制筛子的6个面？</li></ol><ol start="2"><li><p>网格布局</p></li><li><p>圣杯布局</p></li><li><p>输入框组件的布局</p></li><li><p>悬挂式布局</p></li><li><p>固定的底栏</p></li><li><p>流式布局</p></li></ol><p>未完待续…</p><p>原文：阮老师的博客</p><ul><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?^%$" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?^%$</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/07/flex-examples.html</a></li></ul>]]></content>
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>less配合vscode使用的配置</title>
      <link href="/2018/05/05/less%E9%85%8D%E5%90%88vscode%E4%BD%BF%E7%94%A8%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/05/05/less%E9%85%8D%E5%90%88vscode%E4%BD%BF%E7%94%A8%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>使用场景：写jquery老项目懒得配置css预编译的情况下，安装即用，提升效率。</p><ol><li><p>安装 easy less</p></li><li><p>安装Preview on web server</p></li><li><p>在.less 文件最后一行敲下回车，就可以实现编译main.less到main.css了。</p></li></ol><p>如果不生效，就试试下面这个：</p><ol><li><p>安装less转码器</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g <span class="keyword">node</span><span class="title">-sass</span> less</span><br></pre></td></tr></table></figure></li><li><p>在css文件下建个less文件（后缀名为less）</p></li><li><p>Ctrl + Shift + P（配置任务运行器）<br>选择Others<br>替换内容为：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="comment">// Less configuration</span></span><br><span class="line"><span class="number">2.</span> &#123;</span><br><span class="line"><span class="number">3.</span> <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line"><span class="number">4.</span> <span class="string">"command"</span>: <span class="string">"lessc"</span>,</span><br><span class="line"><span class="number">5.</span> <span class="string">"isShellCommand"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="number">6.</span> <span class="string">"args"</span>: [<span class="string">"css/名字.less"</span>, <span class="string">"css/名字.css"</span>]</span><br><span class="line"><span class="number">7.</span> &#125;</span><br><span class="line"><span class="number">8.</span> &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> 效率工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> less </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>node版本切换工具的常用命令</title>
      <link href="/2018/05/05/node%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2%E5%B7%A5%E5%85%B7nvm%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/05/05/node%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2%E5%B7%A5%E5%85%B7nvm%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>使用场景：同时处理几个项目时，依赖的node版本不同，使用nvm工具，可以实现快速切换。</p><ul><li>nvm install <version>  ## 安装指定版本，可模糊安装，如：安装v4.4.0，既可nvm install v4.4.0，又可nvm install 4.4</version></li><li>nvm uninstall <version>  ## 删除已安装的指定版本，语法与install类似</version></li><li>nvm use <version>  ## 切换使用指定的版本node</version></li><li>nvm ls  ## 列出所有安装的版本</li><li>nvm ls-remote  ## 列出所以远程服务器的版本（官方node version list）</li><li>nvm current  ## 显示当前的版本</li><li>nvm alias <name> <version>  ## 给不同的版本号添加别名</version></name></li><li>nvm unalias <name>  ## 删除已定义的别名</name></li><li>nvm reinstall-packages <version>  ## 在当前版本node环境下，重新全局安装指定版本号的npm包</version></li></ul>]]></content>
      
      <categories>
          
          <category> 效率工具 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>从面试的角度夯实前端基础</title>
      <link href="/2018/05/02/%E4%BB%8E%E9%9D%A2%E8%AF%95%E7%9A%84%E8%A7%92%E5%BA%A6%E5%A4%AF%E5%AE%9E%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/05/02/%E4%BB%8E%E9%9D%A2%E8%AF%95%E7%9A%84%E8%A7%92%E5%BA%A6%E5%A4%AF%E5%AE%9E%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h3 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h3><ol><li>如何实现一个三栏布局，要求两边固定宽度，中间宽度自适应？</li><li>圣杯布局 双飞翼布局 flex布局分别是什么？</li><li>css的几种垂直居中的方法</li></ol><a id="more"></a><h3 id="Javascript基础"><a href="#Javascript基础" class="headerlink" title="Javascript基础"></a>Javascript基础</h3><ol><li>js中的变量提升是什么原理？</li><li>标准浏览器的事件模型是什么样子的？与ie6 ie7 ie8的差异在哪里？<ul><li>先冒泡还是先捕获？</li><li>各浏览器监听函数的写法是否一致？</li><li>冒泡和捕获的区别是什么？</li></ul></li><li>闭包的原理是什么？为什么会造成内存泄露？</li></ol><h3 id="HTTP协议-amp-缓存"><a href="#HTTP协议-amp-缓存" class="headerlink" title="HTTP协议 &amp; 缓存"></a>HTTP协议 &amp; 缓存</h3><ol><li>下面的状态码代表的是什么意思？200、204、301、302、304、404？</li><li>HTTP1 和 HTTP1.1的主要差别是什么？为什么有这些差别？catch-control/expired/E-tag/last-modify?</li><li>对运营商劫持有什么好的处理办法？</li></ol><h3 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h3><ol><li>富文本编辑器如何解决XSS问题？</li><li>为什么Restfal API不应当使用’Access-Cross-Origin:* ‘来实现跨域？</li></ol><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><ol><li>Express 和 Koa有什么差别？</li><li>怎么在Node做CI测试？</li></ol><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ol><li>Yslow 和 PageSpeed用过吗?记得其中多少规则？</li><li>CDN是什么?为什么能资源加速?</li><li>前端怎么样拿到DNS的查询时间？</li></ol><h3 id="设计-amp-交互-amp-体验"><a href="#设计-amp-交互-amp-体验" class="headerlink" title="设计&amp;交互&amp;体验"></a>设计&amp;交互&amp;体验</h3><ol><li>PNG 和 JPG 的区别是什么？</li></ol><h3 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h3><ol><li>你使用过构建工具来编译前端代码吗?使用过 Grunt、Gulp、webpack、FIS中的一些吗？</li></ol><h3 id="经验考察"><a href="#经验考察" class="headerlink" title="经验考察"></a>经验考察</h3><ol><li>你遇到过兼容性问题吗?最令你影响深刻的兼容问题什么?</li></ol><h3 id="持续更新中······欢迎补充"><a href="#持续更新中······欢迎补充" class="headerlink" title="持续更新中······欢迎补充"></a>持续更新中······欢迎补充</h3>]]></content>
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> HTTP </tag>
            
            <tag> 安全 </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>复制知乎/简书的文本内容，为什么会自带版权声明？</title>
      <link href="/2018/05/01/%E5%A4%8D%E5%88%B6%E7%9F%A5%E4%B9%8E%E7%AE%80%E4%B9%A6%E7%9A%84%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E8%87%AA%E5%B8%A6%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%EF%BC%9F/"/>
      <url>/2018/05/01/%E5%A4%8D%E5%88%B6%E7%9F%A5%E4%B9%8E%E7%AE%80%E4%B9%A6%E7%9A%84%E6%96%87%E6%9C%AC%E5%86%85%E5%AE%B9%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E8%87%AA%E5%B8%A6%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>实现思路：</p><ol><li>答案区域监听copy事件，并阻止这个事件的默认行为。</li><li>获取选中的内容<strong>window.getSelection()</strong>后加上版权信息，然后设置到剪切板<strong>clipboardData.setData()</strong>。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"copyText"</span>&gt;</span>我是一段即将被复制的话<span class="tag">&lt;<span class="name">b</span>&gt;</span>test<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">setClipboardText</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line"><span class="undefined">        e.preventDefault();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> node = <span class="built_in">document</span>.getElementById(<span class="string">'#copyText'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> htmlData = <span class="string">'&lt;div&gt;著作权归作者所有。&lt;br /&gt;'</span></span></span><br><span class="line"><span class="actionscript">                        + <span class="string">'商业转载请联系作者获得授权，非商业转载请注明出处。&lt;br /&gt;'</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        + '作者：shengyu <span class="tag">&lt;<span class="name">br</span>/&gt;</span>链接：https://shengyur.github.io/<span class="tag">&lt;<span class="name">br</span> /&gt;</span>'</span></span></span><br><span class="line"><span class="undefined">                        + node.innerHTML</span></span><br><span class="line"><span class="actionscript">                        + <span class="string">'&lt;/div&gt;'</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> textData = <span class="string">'著作权归作者所有。\n'</span></span></span><br><span class="line"><span class="actionscript">                        + <span class="string">'商业转载请联系作者获得授权，非商业转载请注明出处。\n'</span></span></span><br><span class="line"><span class="actionscript">                        + <span class="string">'作者：shengyu \n链接：https://shengyur.github.io/ \n'</span></span></span><br><span class="line"><span class="javascript">                        + <span class="built_in">window</span>.getSelection().getRangeAt(<span class="number">0</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(e.clipboardData)&#123;  </span></span><br><span class="line"><span class="actionscript">            e.clipboardData.setData(<span class="string">"text/html"</span>, htmlData);</span></span><br><span class="line"><span class="actionscript">            e.clipboardData.setData(<span class="string">"text/plain"</span>,textData);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.clipboardData)&#123;  </span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">window</span>.clipboardData.setData(<span class="string">"text"</span>, textData);  </span></span><br><span class="line"><span class="undefined">        &#125;  </span></span><br><span class="line"><span class="undefined">    &#125;;  </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> answer = <span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>);</span></span><br><span class="line"><span class="actionscript">    answer.addEventListener(<span class="string">'copy'</span>,<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</span></span><br><span class="line"><span class="undefined">        setClipboardText(e);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>备注：</p><ul><li>如果是复制到纯文本编辑器，就使用clipboardData.setData(“text/plain”,textData)方法，比如记事本，就没必要保存标签，反正也没啥样式，但是如果是复制到富文本编辑器(clipboardData.setData(“text/html”, htmlData);)，比如word,就有必要保留标签了。</li><li>oncopy 事件在用户拷贝元素上的内容时触发。</li><li>有三种方式可以拷贝元素和内容：<ol><li>按下 CTRL + C</li><li>在你的浏览器的 Edit(编辑) 菜单中选择 “Copy（复制）”</li><li>右键鼠标按钮，在上下文菜单中选择 “Copy（复制）” 命令。</li></ol></li></ul><p>参考：<a href="https://blog.csdn.net/sinat_23880167/article/details/79418505" target="_blank" rel="noopener">https://blog.csdn.net/sinat_23880167/article/details/79418505</a></p>]]></content>
      
      <categories>
          
          <category> 十万个为什么 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>jquery源码解析01——总体架构</title>
      <link href="/2018/04/27/jquery%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB01-%E6%80%BB%E4%BD%93%E6%9E%B6%E6%9E%84/"/>
      <url>/2018/04/27/jquery%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB01-%E6%80%BB%E4%BD%93%E6%9E%B6%E6%9E%84/</url>
      <content type="html"><![CDATA[<h2 id="jquery1-7-1源码的总体结构："><a href="#jquery1-7-1源码的总体结构：" class="headerlink" title="jquery1.7.1源码的总体结构："></a>jquery1.7.1源码的总体结构：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"> window , undefined </span>)</span>&#123;</span><br><span class="line"><span class="comment">//构造jQuery对象</span></span><br><span class="line"><span class="keyword">var</span>  jQuery =  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> jQuery =  <span class="function"><span class="keyword">function</span> (<span class="params">  selector,  context </span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init(selector,context,rootjQuery);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> jQuery;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">//工具方法：Utilities</span></span><br><span class="line"><span class="comment">//回调函数列表：Callbacks  Object</span></span><br><span class="line"><span class="comment">//异步队列：Deferred  Object</span></span><br><span class="line"><span class="comment">//浏览器功能测试：Support</span></span><br><span class="line"><span class="comment">//数据缓存：DataS</span></span><br><span class="line"><span class="comment">//队列：Queue</span></span><br><span class="line"><span class="comment">//属性操作：Attributes</span></span><br><span class="line"><span class="comment">//事件系统：Events</span></span><br><span class="line"><span class="comment">//选择器：Sizzle</span></span><br><span class="line"><span class="comment">//DOM遍历：Traversing</span></span><br><span class="line"><span class="comment">//DOM操作：Manipulation</span></span><br><span class="line"><span class="comment">//样式操作 css  (计算样式、内联样式)</span></span><br><span class="line"><span class="comment">//异步请求：Ajax</span></span><br><span class="line"><span class="comment">//动画： Effects</span></span><br><span class="line"><span class="comment">//坐标：Offset、尺寸 Dimensions</span></span><br><span class="line"><span class="built_in">window</span>.jQuery =  <span class="built_in">window</span>.$  =  jQuery;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><h3 id="为什么要创建一个自调用匿名函数？"><a href="#为什么要创建一个自调用匿名函数？" class="headerlink" title="为什么要创建一个自调用匿名函数？"></a>为什么要创建一个自调用匿名函数？</h3><p>因为js只有没有函数作用域，所以使用匿名函数自调来创建特殊的函数作用域，这个作用域中的代码不会和已有的同名函数、方法和变量以及第三方库冲突</p><h3 id="匿名函数自调有几种不同的写法？"><a href="#匿名函数自调有几种不同的写法？" class="headerlink" title="匿名函数自调有几种不同的写法？"></a>匿名函数自调有几种不同的写法？</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>（<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>: (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>:!<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><h3 id="为什么匿名函数自调-要在在前面加！？"><a href="#为什么匿名函数自调-要在在前面加！？" class="headerlink" title="为什么匿名函数自调 要在在前面加！？"></a>为什么匿名函数自调 要在在前面加！？</h3><p>匿名函数自调叫做<strong>立即调用的函数表达式</strong>更为贴切,直接执行,会报错(语法错误SyntaxError)<br>语法错误的两种原因：</p><ul><li>function (){ }()<br>期望是立即调用一个匿名函数表达式，结果是进行了函数声明，函数声明必须要有标识符做为函数名称</li><li>function g(){ }()<br>期望是立即调用一个具名函数表达式，结果是声明了函数 g。末尾的括号作为分组运算符，必须要提供表达式做为参数。<br>所以那些匿名函数附近使用括号或一些一元运算符的惯用法，就是来引导解析器，指明运算符附近是一个表达式。<br>执行匿名函数可以通过+，-，！，（） 这样的形式来转化为函数表达式，就可以通过（）来运行了。<br><br><br>注意：<br>圆括号运算符也叫分组运算符，它有两种用法：如果表达式放在圆括号中，作用是求值；如果跟在函数后面，作用是调用函数</li></ul><h3 id="为什么要自调用匿名函数设置参数window，并传入window对象？"><a href="#为什么要自调用匿名函数设置参数window，并传入window对象？" class="headerlink" title="为什么要自调用匿名函数设置参数window，并传入window对象？"></a>为什么要自调用匿名函数设置参数window，并传入window对象？</h3><ul><li>通过传入window,可以把window变成局部变量，这样在jquery的代码快中访问window时，不需要将作用域链回退到顶层作用域，<br>从而可以更快的访问window对象</li><li>将window对象作为参数传入，可以在压缩代码时进行优化，在压缩文件中可以发现<br>(function(a,b){…….})(window)参数window被压缩成a,参数undefined被压缩成b</li></ul><h3 id="为什么要自调用匿名函数并设置参数undefined？"><a href="#为什么要自调用匿名函数并设置参数undefined？" class="headerlink" title="为什么要自调用匿名函数并设置参数undefined？"></a>为什么要自调用匿名函数并设置参数undefined？</h3><ul><li>undefined 是window对象的一个属性，通过把undefined当成局部变量使用，但是又不传入任何值，所以undefined的值 就是 “undefined”  可以缩短查找undefined的作用域链</li><li>在压缩代码时可以进行优化</li><li>重要：通过这个方法可以确保参数undefined的值是undefined，因为undefined有可能被重写为新的值</li></ul><h3 id="为什么匿名函数最后或者最开始要加分号？"><a href="#为什么匿名函数最后或者最开始要加分号？" class="headerlink" title="为什么匿名函数最后或者最开始要加分号？"></a>为什么匿名函数最后或者最开始要加分号？</h3><ul><li>因为如果自调用匿名函数（立即调用的函数表达）的前一行代码,没有加分号结尾,那么匿名函数的第一个括号会被认为是函数调用</li></ul>]]></content>
      
      <categories>
          
          <category> 源码浅析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery源码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>github+hexo+Maupassant 搭建个人博客教程</title>
      <link href="/2018/04/18/hexo+github+Maupassant%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/04/18/hexo+github+Maupassant%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p><img src="http://7xqdjc.com1.z0.glb.clouddn.com/blog_c2a91a3b4a43d03bf967dda7c7425506.png" alt=""><br><a id="more"></a></p><h3 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h3><pre><code>用来生成静态页面。移步Node.js官网</code></pre><h3 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2.安装hexo"></a>2.安装hexo</h3><pre><code>mac下输入以下命令安装:</code></pre><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm <span class="keyword">install</span> -g hexo</span><br></pre></td></tr></table></figure><h4 id="避坑指南"><a href="#避坑指南" class="headerlink" title="避坑指南"></a><em>避坑指南</em></h4><ul><li>输入管理员密码（Mac登录密码）即开始安装 (sudo:linux系统管理指令 -g:全局安装)</li><li>Hexo官网上的安装命令是$ npm install -g hexo-cli，安装时不要忘记前面加上sudo，否则会因为权限问题报错。</li></ul><h3 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h3><pre><code>终端cd到一个你选定的目录，执行hexo init命令：</code></pre><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo init blog</span></span><br></pre></td></tr></table></figure><pre><code>blog是你建立的文件夹名称。cd到blog文件夹下，执行如下命令，安装npm：</code></pre><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure><pre><code>执行如下命令,**开启hexo服务器**</code></pre><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure><p>此时，浏览器中打开网址<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>，能看到如下页面：<br><img src="https://raw.githubusercontent.com/shengyur/shengyur.github.io/master/img/hexo4000.png" alt="HEXO初始化"><br>至此，跟新博客的本地环境就搭好了！</p><h3 id="4-关联Github"><a href="#4-关联Github" class="headerlink" title="4.关联Github"></a>4.关联Github</h3><ul><li><p>创建仓库<br>  登录你的Github帐号，新建仓库，名为用户名.github.io固定写法，如我的博客分支名：shengyur.github.io即下图中1所示：<br><img src="https://raw.githubusercontent.com/shengyur/shengyur.github.io/master/img/BLOG.jpg" alt=""></p><p>  本地的blog文件夹下内容为：</p></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">db.json</span><br><span class="line">node_modules</span><br><span class="line">package.json</span><br><span class="line">scaffolds</span><br><span class="line">source</span><br><span class="line">themes</span><br></pre></td></tr></table></figure><ul><li>终端cd到blog文件夹下，打开_config.yml，命令如下：</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span> _config.yml</span><br></pre></td></tr></table></figure><ul><li>查看文件最后，修改deploy为：</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/shengyur/shengyur.github.io.git</span></span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure><ul><li>然后将repo后面的地址中的 shengyur 换成你自己的用户名</li></ul><h4 id="避坑指南二"><a href="#避坑指南二" class="headerlink" title="避坑指南二"></a><em>避坑指南二</em></h4><p>在配置所有的_config.yml文件时（包括theme中的），在所有的冒号:后边都要加一个空格，否则执行hexo命令会报错。<br>在blog文件夹目录下执行<strong>生成静态页面命令</strong>：<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">generate</span>     简写：hexo g</span><br></pre></td></tr></table></figure></p><p>此时若出现如下报错：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ERROR </span>Local hexo not found in ~/blog</span><br><span class="line"><span class="keyword">ERROR </span>Try runing: 'npm install hexo --save'</span><br></pre></td></tr></table></figure><p>则执行命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>再执行<strong>配置命令</strong>：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">deploy</span>       简写：hexo d</span><br></pre></td></tr></table></figure></p><h4 id="避坑指南三"><a href="#避坑指南三" class="headerlink" title="避坑指南三"></a><em>避坑指南三</em></h4><p>若执行命令hexo deploy仍然报错：无法连接git或找不到git，则执行如下命令来安装<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>再次执行hexo generate和hexo deploy命令。<br>若你未关联Github，则执行hexo deploy命令时终端会提示你输入Github的用户名和密码，即</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Username <span class="keyword">for</span> <span class="symbol">'https</span>:<span class="comment">//github.com':</span></span><br><span class="line">Password <span class="keyword">for</span> <span class="symbol">'https</span>:<span class="comment">//github.com':</span></span><br></pre></td></tr></table></figure><p>hexo deploy命令执行成功后，浏览器中打开网址<a href="http://shengyur.github.io" target="_blank" rel="noopener">http://shengyur.github.io</a>,<br>将shengyur换成你的用户名,就能能看到和打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 时一样的页面了。</p><h3 id="5-添加ssh-key到Github"><a href="#5-添加ssh-key到Github" class="headerlink" title="5.添加ssh key到Github"></a>5.添加ssh key到Github</h3><h4 id="5-1-检查SSH-keys是否存在Github"><a href="#5-1-检查SSH-keys是否存在Github" class="headerlink" title="5.1 检查SSH keys是否存在Github"></a>5.1 检查SSH keys是否存在Github</h4><p>执行如下命令，检查SSH keys是否存在。如果有文件id_rsa.pub或id_dsa.pub，则直接进入步骤5.3将SSH key添加到Github中，否则进入下一步生成SSH key。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ls</span> -al ~<span class="string">/.ssh</span></span><br></pre></td></tr></table></figure><h4 id="5-2-生成新的ssh-key"><a href="#5-2-生成新的ssh-key" class="headerlink" title="5.2 生成新的ssh key"></a>5.2 生成新的ssh key</h4><p>执行如下命令生成public/private rsa key pair，注意将<a href="mailto:your_email@example.com" target="_blank" rel="noopener">your_email@example.com</a>换成你自己注册Github的邮箱地址。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ssh-keygen</span> <span class="selector-tag">-t</span> <span class="selector-tag">rsa</span> <span class="selector-tag">-C</span> "<span class="selector-tag">your_email</span>@<span class="keyword">example</span>.<span class="keyword">com</span>"</span><br></pre></td></tr></table></figure><p>默认会在相应路径下（~/.ssh/id_rsa.pub）生成id_rsa和id_rsa.pub两个文件。</p><h4 id="5-3-将ssh-key添加到Github中"><a href="#5-3-将ssh-key添加到Github中" class="headerlink" title="5.3 将ssh key添加到Github中"></a>5.3 将ssh key添加到Github中</h4><ul><li><p>Find前往文件夹~/.ssh/id_rsa.pub打开id_rsa.pub文件，里面的信息即为SSH key，将这些信息复制到Github的Add SSH key页面即可。</p></li><li><p>进入Github –&gt; Settings –&gt; SSH keys –&gt; add SSH key:</p></li><li><p>Title里任意添一个标题，将复制的内容粘贴到Key里，点击下方Add key绿色按钮即可。</p></li></ul><h3 id="6-发布文章"><a href="#6-发布文章" class="headerlink" title="6.发布文章"></a>6.发布文章</h3><p>终端cd到blog文件夹下，执行如下命令<strong>新建文章</strong>：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="string">"postName"</span></span><br></pre></td></tr></table></figure><p>名为postName.md的文件会建在目录/blog/source/_posts下。我使用的是vscode来编辑.md文件，语法高亮、错误提示还不错。<br>文章编辑完成后，终端cd到blog文件夹下，执行如下命令来发布：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">generate</span>                 <span class="comment">//生成静态页面</span></span><br><span class="line"></span><br><span class="line">hexo deploy                   <span class="comment">//将文章部署到Github</span></span><br></pre></td></tr></table></figure><p>至此，Mac上搭建基于Github的Hexo博客就大功告成了！</p><h3 id="7-跟换博客主题"><a href="#7-跟换博客主题" class="headerlink" title="7.跟换博客主题"></a>7.跟换博客主题</h3><p>如果不喜欢官网默认主题的话，以到<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官网主题页</a>去搜寻自己喜欢的theme，或者去知乎看看推荐，找款自己心爱的皮肤，为所欲为~</p><p>参考：</p><ul><li><a href="https://blog.csdn.net/yanzi1225627/article/details/54566792" target="_blank" rel="noopener">https://blog.csdn.net/yanzi1225627/article/details/54566792</a></li><li><a href="https://www.jianshu.com/p/13e64c9e2295" target="_blank" rel="noopener">https://www.jianshu.com/p/13e64c9e2295</a></li></ul>]]></content>
      
      <categories>
          
          <category> 效率工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git常用基本命令</title>
      <link href="/2018/04/17/git%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/04/17/git%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h3 id="必须记住的六条命令"><a href="#必须记住的六条命令" class="headerlink" title="必须记住的六条命令"></a>必须记住的六条命令</h3><ol><li>cd:用来切换工作目录,最常用的一个命令。简单来讲，cd A文件夹就是进入到A文件夹里面的意思。</li><li>git status .：查看当前路径下的的状态。git下最最常用的一个命令。</li><li>git add .: 把工作区的所有变化，(就是你的所有改动)，都添加到 版本库/暂存区。</li><li>git commit -m “提交时说明信息”: 更进一步提交，并说明提交log。</li><li>git push: 把版本库的所有更新内容， 都推送到远程服务器。(就是推代码/推上去)</li><li>git pull: 把代码从远程服务器拉取到本地。(俗称拉代码)<a id="more"></a></li></ol><h3 id="当我们修改了本地代码，向远程服务器推送时，我们的操作步骤如下"><a href="#当我们修改了本地代码，向远程服务器推送时，我们的操作步骤如下" class="headerlink" title="当我们修改了本地代码，向远程服务器推送时，我们的操作步骤如下:"></a>当我们修改了本地代码，向远程服务器推送时，我们的操作步骤如下:</h3><ol><li>git add .</li><li>git commit -m “提交时说明信息”</li><li>git push</li><li>当我们想更新本地代码，就是把服务器上最新的代码拉取下来，只需要执行一个命令: git pull</li></ol><h3 id="这三条命令建议记住"><a href="#这三条命令建议记住" class="headerlink" title="这三条命令建议记住"></a>这三条命令建议记住</h3><ol><li>git log:查看提交历史，与各次的提交说明。</li><li>git diff:比较工作区与暂存区的差异，就是比较看看你到底都做了什么修改。</li><li>git clone url地址: 将远程服务器上项目克隆到新创建的目录中（第一次拉项目时使用， 后面的更新都用 git pull了）。</li></ol><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><ul><li>操作时 双击tab键的自动提示/补全功能。</li><li>q或者:q等命令代表退出(quit)。</li><li>ctrl+f,ctrl+b快捷键在termial可以翻页，就是 上一页，下一页</li></ul><h1 id="正文部分"><a href="#正文部分" class="headerlink" title="正文部分"></a>正文部分</h1><h2 id="理解几个概念"><a href="#理解几个概念" class="headerlink" title="理解几个概念"></a>理解几个概念</h2><p>工作区（Working Directory）， 版本库（Repository）/暂存区 ，（中央/远程）服务器.</p><p><em>服务器</em>:概念已经清楚了。叫做 中央服务器/远程服务器都行。<br><em>工作区</em>:就是你电脑的工作目录<br><em>版本库</em>:工作区有一个隐藏的 .git文件夹，这个是叫做 版本库(有些文章也叫 暂存区，不管叫什么，知道这个意思就好)。.git 是隐藏文件夹。该文件内的内容很重要，因为git的控制配置等信息，都在这个隐藏文件夹里。电脑如果设置不显示隐藏文件夹，那么就会看不到。</p><h2 id="为什么存在一个-版本库？"><a href="#为什么存在一个-版本库？" class="headerlink" title="为什么存在一个 版本库？"></a>为什么存在一个 版本库？</h2><p>我修改过的代码，直接从 工作区提交到服务器不就行了嘛，为什么还要这么麻烦。svn 等集中式版本管理系统就是这么做的，简单明了，但是如果你没网络时怎么办？所以有了 版本库，那么你可以把代码先从工作区提交到版本库，等待有网络了，可以再提交到服务器。</p><h2 id="gitignore文件是干啥的"><a href="#gitignore文件是干啥的" class="headerlink" title=".gitignore文件是干啥的?"></a>.gitignore文件是干啥的?</h2><p>工作区的目录下面，总会存在很多乱七八糟的文件，比如你本地的配置，编译生成的中间文件等，这些文件你不想(或不能)提交到 服务器。那怎么办呢。就把这些文件的规则写到 .gitignore文件中，这样git就会 ignore(忽略)这些文件，git就会像没看到这些文件一样。</p><h2 id="gitignore文件的使用"><a href="#gitignore文件的使用" class="headerlink" title=".gitignore文件的使用"></a>.gitignore文件的使用</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1）<span class="string">/mtk/</span>               过滤整个文件夹</span><br><span class="line">2）*<span class="string">.zip</span>                过滤所有<span class="string">.zip</span>文件</span><br><span class="line">3）<span class="string">/mtk/do.c</span>         过滤某个具体文件</span><br></pre></td></tr></table></figure><p>被过滤掉的文件就不会出现在git仓库中（gitlab或github）了，当然本地库中还有，只是push的时候不会上传。<br>需要注意的是，gitignore还可以指定要将哪些文件添加到版本管理中：<br><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）!*.zip</span><br><span class="line"><span class="number">2</span>）!/mtk/one.txt</span><br></pre></td></tr></table></figure></p><p>唯一的区别就是规则开头多了一个感叹号，Git会将满足这类规则的文件添加到版本管理中。<br>为什么要有两种规则呢？想象一个场景： <strong>假如我们只需要管理/mtk/目录中的one.txt文件，这个目录中的其他文件都不需要管理</strong> ，那么我们就需要使用：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）<span class="regexp">/mtk/</span></span><br><span class="line"><span class="number">2</span>）!<span class="regexp">/mtk/</span>one.txt</span><br></pre></td></tr></table></figure></p><p>假设我们只有过滤规则，而没有添加规则，那么我们就需要把/mtk/目录下除了one.txt以外的所有文件都写出来！</p><p>配置语法：<br>以斜杠“/”开头表示目录；<br>以星号通配多个字符；<br>以问号“?”通配单个字符<br>以方括号“[]”包含单个字符的匹配列表；<br>以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；</p><ul><li>参考：</li><li>小白教程：<a href="https://www.cnblogs.com/yaoxiaowen/p/8227873.html" target="_blank" rel="noopener">https://www.cnblogs.com/yaoxiaowen/p/8227873.html</a></li><li>秒秒钟入门markdown语法：<a href="https://www.jianshu.com/p/q81RER" target="_blank" rel="noopener">https://www.jianshu.com/p/q81RER</a></li><li>Git忽略规则.gitignore梳理:<a href="https://www.cnblogs.com/kevingrace/p/5690241.html" target="_blank" rel="noopener">https://www.cnblogs.com/kevingrace/p/5690241.html</a></li></ul>]]></content>
      
      <categories>
          
          <category> 效率工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
