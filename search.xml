<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>github+hexo+Maupassant建站攻略</title>
      <link href="/2018/04/18/hexo+github+Maupassant%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/04/18/hexo+github+Maupassant%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h3 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h3><p>用来生成静态页面。移步Node.js官网</p><h3 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2.安装hexo"></a>2.安装hexo</h3><p>mac下输入以下命令安装:<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm <span class="keyword">install</span> -g hexo</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>注意：</p><ul><li>输入管理员密码（Mac登录密码）即开始安装 (sudo:linux系统管理指令 -g:全局安装)</li><li>Hexo官网上的安装命令是$ npm install -g hexo-cli，安装时不要忘记前面加上sudo，否则会因为权限问题报错。</li></ul><h3 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h3><p>终端cd到一个你选定的目录，执行hexo init命令：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo init blog</span></span><br></pre></td></tr></table></figure></p><p>blog是你建立的文件夹名称。cd到blog文件夹下，执行如下命令，安装npm：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure></p><p>执行如下命令，开启hexo服务器：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure></p><p>此时，浏览器中打开网址<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>，能看到如下页面：<br><img src="https://raw.githubusercontent.com/shengyur/shengyur.github.io/master/img/hexo4000.png" alt="HEXO初始化"><br>至此，跟新博客的本地环境就搭好了</p><h3 id="4-关联Github"><a href="#4-关联Github" class="headerlink" title="4.关联Github"></a>4.关联Github</h3><ul><li>1.创建仓库<br>登录你的Github帐号，新建仓库，名为用户名.github.io固定写法，如我的博客分支名：shengyur.github.io即下图中1所示：</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>小白适用git常用命令</title>
      <link href="/2018/04/17/git%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2018/04/17/git%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h3 id="必须记住的六条命令"><a href="#必须记住的六条命令" class="headerlink" title="必须记住的六条命令"></a>必须记住的六条命令</h3><ol><li>cd:用来切换工作目录,最常用的一个命令。简单来讲，cd A文件夹就是进入到A文件夹里面的意思。</li><li>git status .：查看当前路径下的的状态。git下最最常用的一个命令。</li><li>git add .: 把工作区的所有变化，(就是你的所有改动)，都添加到 版本库/暂存区。</li><li>git commit -m “提交时说明信息”: 更进一步提交，并说明提交log。</li><li>git push: 把版本库的所有更新内容， 都推送到远程服务器。(就是推代码/推上去)</li><li>git pull: 把代码从远程服务器拉取到本地。(俗称拉代码)<a id="more"></a></li></ol><h3 id="当我们修改了本地代码，向远程服务器推送时，我们的操作步骤如下"><a href="#当我们修改了本地代码，向远程服务器推送时，我们的操作步骤如下" class="headerlink" title="当我们修改了本地代码，向远程服务器推送时，我们的操作步骤如下:"></a>当我们修改了本地代码，向远程服务器推送时，我们的操作步骤如下:</h3><ol><li>git add .</li><li>git commit -m “提交时说明信息”</li><li>git push</li><li>当我们想更新本地代码，就是把服务器上最新的代码拉取下来，只需要执行一个命令: git pull</li></ol><h3 id="这三条命令建议记住"><a href="#这三条命令建议记住" class="headerlink" title="这三条命令建议记住"></a>这三条命令建议记住</h3><ol><li>git log:查看提交历史，与各次的提交说明。</li><li>git diff:比较工作区与暂存区的差异，就是比较看看你到底都做了什么修改。</li><li>git clone url地址: 将远程服务器上项目克隆到新创建的目录中（第一次拉项目时使用， 后面的更新都用 git pull了）。</li></ol><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><ul><li>操作时 双击tab键的自动提示/补全功能。</li><li>q或者:q等命令代表退出(quit)。</li><li>ctrl+f,ctrl+b快捷键在termial可以翻页，就是 上一页，下一页</li></ul><h1 id="正文部分"><a href="#正文部分" class="headerlink" title="正文部分"></a>正文部分</h1><h2 id="理解几个概念"><a href="#理解几个概念" class="headerlink" title="理解几个概念"></a>理解几个概念</h2><p>工作区（Working Directory）， 版本库（Repository）/暂存区 ，（中央/远程）服务器.</p><p><em>服务器</em>:概念已经清楚了。叫做 中央服务器/远程服务器都行。<br><em>工作区</em>:就是你电脑的工作目录<br><em>版本库</em>:工作区有一个隐藏的 .git文件夹，这个是叫做 版本库(有些文章也叫 暂存区，不管叫什么，知道这个意思就好)。.git 是隐藏文件夹。该文件内的内容很重要，因为git的控制配置等信息，都在这个隐藏文件夹里。电脑如果设置不显示隐藏文件夹，那么就会看不到。</p><h2 id="为什么存在一个-版本库？"><a href="#为什么存在一个-版本库？" class="headerlink" title="为什么存在一个 版本库？"></a>为什么存在一个 版本库？</h2><p>我修改过的代码，直接从 工作区提交到服务器不就行了嘛，为什么还要这么麻烦。svn 等集中式版本管理系统就是这么做的，简单明了，但是如果你没网络时怎么办？所以有了 版本库，那么你可以把代码先从工作区提交到版本库，等待有网络了，可以再提交到服务器。</p><h2 id="gitignore文件是干啥的"><a href="#gitignore文件是干啥的" class="headerlink" title=".gitignore文件是干啥的?"></a>.gitignore文件是干啥的?</h2><p>工作区的目录下面，总会存在很多乱七八糟的文件，比如你本地的配置，编译生成的中间文件等，这些文件你不想(或不能)提交到 服务器。那怎么办呢。就把这些文件的规则写到 .gitignore文件中，这样git就会 ignore(忽略)这些文件，git就会像没看到这些文件一样。</p><h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h2><p>-参考：<br>-小白教程：<a href="https://www.cnblogs.com/yaoxiaowen/p/8227873.html" target="_blank" rel="noopener">https://www.cnblogs.com/yaoxiaowen/p/8227873.html</a><br>-秒秒钟入门markdown语法：<a href="https://www.jianshu.com/p/q81RER" target="_blank" rel="noopener">https://www.jianshu.com/p/q81RER</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
